DELIMITER $$

DROP PROCEDURE IF EXISTS `ActualizarUsuarios`$$
CREATE PROCEDURE `ActualizarUsuarios` (
    IN `p_nombre` VARCHAR(100),
    IN `p_telefono` VARCHAR(100),
    IN `p_email` VARCHAR(100),
    IN `p_token` VARCHAR(255)
)
BEGIN
    UPDATE usuarios
    SET
        nombre = p_nombre,
        telefono = p_telefono,
        email = p_email
    WHERE tokenUsuario = p_token;
END$$

DROP PROCEDURE IF EXISTS `Balance`$$
CREATE PROCEDURE `Balance` (
    IN `p_tokenUsuario` VARCHAR(255)
)
BEGIN
    SELECT saldo
    FROM usuarios
    WHERE tokenUsuario = p_tokenUsuario;
END$$

DROP PROCEDURE IF EXISTS `ContarMovimientos`$$
CREATE PROCEDURE `ContarMovimientos` (
    IN `p_token` VARCHAR(255)
)
BEGIN
    SELECT COUNT(*) AS Cantidad
    FROM movimientos
    WHERE token = p_token;
END$$

DROP PROCEDURE IF EXISTS `Login`$$
CREATE PROCEDURE `Login` (
    IN `p_email` VARCHAR(100)
)
BEGIN
    SELECT id, nombre, email, contrasena, cedula, privilegios, tokenUsuario, telefono, fecha_registro, saldo, activo
    FROM usuarios
    WHERE email = p_email;
END$$

DROP PROCEDURE IF EXISTS `Movimientos`$$
CREATE PROCEDURE `Movimientos` (
    IN `p_token` VARCHAR(255),
    IN `paginas` INT,
    IN `porPagina` INT
)
BEGIN
    DECLARE offsetPaginas INT;
    SET offsetPaginas = (paginas - 1) * porPagina;

    SELECT *
    FROM movimientos
    WHERE token = p_token
    ORDER BY fecha DESC
    LIMIT porPagina OFFSET offsetPaginas;
END$$

DROP PROCEDURE IF EXISTS `Recargar`$$
CREATE PROCEDURE `Recargar` (
    IN `p_tokenUsuario` VARCHAR(255),
    IN `p_cantidad` INT,
    IN `p_gestor` VARCHAR(255)
)
BEGIN
    DECLARE v_saldo_actual INT;

    SELECT saldo INTO v_saldo_actual
    FROM usuarios
    WHERE tokenUsuario = p_tokenUsuario;

    UPDATE usuarios
    SET saldo = v_saldo_actual + p_cantidad
    WHERE tokenUsuario = p_tokenUsuario;

    INSERT INTO movimientos (
        descripcion,
        fecha,
        ingresos,
        egresos,
        token,
        gestor
    ) VALUES (
        CONCAT('Recarga de ', p_cantidad),
        NOW(),
        p_cantidad,
        0,
        p_tokenUsuario,
        p_gestor
    );

    SELECT LAST_INSERT_ID() AS id_movimiento;
END$$

DROP PROCEDURE IF EXISTS `RegistrarUsuario`$$
CREATE PROCEDURE `RegistrarUsuario` (
    IN `p_nombre` VARCHAR(100),
    IN `p_contrasena` VARCHAR(255),
    IN `p_cedula` INT,
    IN `p_telefono` VARCHAR(100),
    IN `p_email` VARCHAR(100)
)
BEGIN
    DECLARE token VARCHAR(64);
    SET token = UPPER(SHA2(UUID(), 256));

    INSERT INTO usuarios (nombre, contrasena, cedula, telefono, email, tokenUsuario)
    VALUES (p_nombre, p_contrasena, p_cedula, p_telefono, p_email, token);

    SELECT LAST_INSERT_ID() AS id, token;
END$$

DROP PROCEDURE IF EXISTS `verificarRecargas`$$
CREATE PROCEDURE `verificarRecargas` (
    IN `p_cedula` INT,
    IN `p_cantidad` INT
)
BEGIN
    SELECT
        u.tokenUsuario AS token,
        u.nombre,
        u.telefono,
        u.email,
        p_cantidad AS cantidad
    FROM usuarios u
    WHERE u.cedula = p_cedula;
END$$

DELIMITER ;
